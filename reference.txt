import React, { useState, useEffect } from "react";
import { Menu, ChevronLeft, LogOut, FileText, Edit, BarChart, Users } from "lucide-react";
import { useNavigate } from "react-router-dom";
import toast, { Toaster } from 'react-hot-toast';
import axios from "axios";
import MCQPanelInterface from './McqQuestion';

// Separate component for the form field to improve reusability
const FormField = ({ label, type = "text", value, onChange, placeholder }) => (
  <div>
    <label className="block text-sm font-medium text-gray-700 mb-2">{label}</label>
    <input
      type={type}
      className="w-full px-4 py-3 rounded-lg border border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all"
      value={value}
      onChange={onChange}
      placeholder={placeholder}
    />
  </div>
);

// Separate component for the stats card to improve reusability
const StatsCard = ({ title, value, colorClass }) => (
  <div className="bg-gray-50 p-6 rounded-lg">
    <h3 className="text-lg font-medium mb-2">{title}</h3>
    <p className={`text-3xl font-bold ${colorClass}`}>{value}</p>
  </div>
);

const PanelDashboard = () => {
  const navigate = useNavigate();
  const [isSidebarOpen, setSidebarOpen] = useState(false);
  const [activeTab, setActiveTab] = useState("generate");
  
  const [tasks, setTasks] = useState([]);
  const [prompt, setPrompt] = useState("");
  const [generatedQuestion, setGeneratedQuestion] = useState("");
  const [loading, setLoading] = useState(false);
  const [selectedQuestion, setSelectedQuestion] = useState(null);
  const [databaseQuestions, setDatabaseQuestions] = useState([]);
  const [editQuestionText, setEditQuestionText] = useState("");
  
  // New state variables
  
  const [assignedTasks, setAssignedTasks] = useState([]);
  const [candidates, setCandidates] = useState([]);
  const [selectedQuestions, setSelectedQuestions] = useState([]);
  const [showMCQ, setShowMCQ] = useState(false);

  const menuItems = [
    { id: "generate", icon: <Edit />, label: "Generate Questions" },
    { id: "manage", icon: <FileText />, label: "Manage Questions" },
    { id: "candidates", icon: <Users />, label: "Candidates" },
    { id: "stats", icon: <BarChart />, label: "Statistics" }
  ];

  const handleLogout = () => {
    localStorage.removeItem("authToken"); // Clear authentication token
    sessionStorage.clear(); // Clear session storage
    navigate("/login"); // Redirect to login page
  };

  useEffect(() => {
    // Fetch all data on component mount
    fetchTasks();
    fetchQuestions();
    fetchCandidates();
    fetchAssignedTasks();
  }, []);




    return (
      <div className="min-h-screen bg-gray-100">
        <button
          onClick={() => setSidebarOpen(!isSidebarOpen)}
          className="md:hidden fixed top-4 left-4 z-50 p-2 bg-slate-800 text-white rounded-lg"
        >
          <Menu />
        </button>

        <aside
        className={`fixed top-0 left-0 h-full bg-slate-800 text-white transition-all duration-300 ease-in-out z-40 
          ${isSidebarOpen ? 'w-64' : 'w-0 md:w-20'}`}
      >
        <div className="flex items-center justify-between p-4 border-b border-slate-700">
          {isSidebarOpen && <h2 className="text-xl font-bold">Panel Dashboard</h2>}
          <button
            onClick={() => setSidebarOpen(!isSidebarOpen)}
            className="hidden md:block"
          >
            <ChevronLeft />
          </button>
        </div>

        <nav className="mt-6 space-y-2 px-2 flex flex-col h-[calc(100%-5rem)]">
          <div className="space-y-2">
            {menuItems.map(({ id, icon, label }) => (
              <button
                key={id}
                onClick={() => setActiveTab(id)}
                className={`w-full flex items-center p-3 rounded-lg transition-colors
                  ${activeTab === id ? "bg-blue-600" : "hover:bg-slate-700"}`}
              >
                {icon}
                {isSidebarOpen && <span className="ml-3">{label}</span>}
              </button>
            ))}
          </div>
          
          <button
            onClick={handleLogout}
            className="w-full flex items-center p-3 rounded-lg transition-colors hover:bg-red-600 mt-auto"
          >
            <LogOut />
            {isSidebarOpen && <span className="ml-3">Logout</span>}
          </button>
        </nav>
      </aside>

        <main className={`transition-all duration-300 p-4 md:p-8 
          ${isSidebarOpen ? 'md:ml-64' : 'md:ml-20'}`}>
          <div className="bg-white rounded-2xl shadow-sm mt-12 md:mt-0">
            <div className="p-6 border-b border-gray-100">
              <h2 className="text-2xl font-semibold text-gray-800">
                {activeTab === "generate" ? "Generate Questions" : 
                activeTab === "manage" ? "Manage Questions" : 
                activeTab === "candidates" ? "Assigned Candidates" : "Question Statistics"}
              </h2>
            </div>
            
            <div className="p-6">
              {activeTab === "generate" && (
                <div className="space-y-6">
                  {showMCQ ? (
                    <>
                      <div className="flex justify-between items-center mb-4">
                        <button
                          onClick={() => setShowMCQ(false)}
                          className="px-4 py-2 text-sm bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
                        >
                          ‚Üê Back to Question Generator
                        </button>
                      </div>
                      <MCQPanelInterface prompt={prompt} />
                    </>
                  ) : (
                    <>
                      {/* Existing assigned tasks section */}
                      <div className="bg-gray-50 p-6 rounded-lg mb-6">
                        {/* ... existing assigned tasks code ... */}
                      </div>
                      
                      {/* Generate Question Form */}
                      <div className="bg-gray-50 p-6 rounded-lg">
                        <h3 className="text-lg font-medium mb-4">Generate Question</h3>
                        <div className="space-y-4">
                          <FormField 
                            label="Enter Prompt" 
                            value={prompt} 
                            onChange={(e) => setPrompt(e.target.value)} 
                            placeholder="Describe the question you want to generate (include 'MCQ' for multiple choice questions)"
                          />
                          
                          <button
                            onClick={generateQuestion}
                            disabled={loading}
                            className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors w-full md:w-auto"
                          >
                            {loading ? "Generating..." : "Generate Question"}
                          </button>
                          
                          {/* ... existing generated question display ... */}
                        </div>
                      </div>
                    </>
                  )}
                </div>
              )}

              {activeTab === "manage" && (
                <div className="space-y-6">
                  {/* Edit Question Form */}
                  <div className="bg-gray-50 p-6 rounded-lg mb-6">
                    <h3 className="text-lg font-medium mb-4">Edit Question</h3>
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Select Question</label>
                        <select
                          className="w-full px-4 py-3 rounded-lg border border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all"
                          value={selectedQuestion || ""}
                          onChange={handleQuestionSelect}
                        >
                          <option value="">Select a question</option>
                          {databaseQuestions.map((q) => (
                            <option key={q.id} value={q.id}>
                              {q.content.length > 50 ? q.content.substring(0, 50) + "..." : q.content}
                            </option>
                          ))}
                        </select>
                      </div>
                      
                      {selectedQuestion && (
                        <>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">Question Text</label>
                            <textarea
                              className="w-full px-4 py-3 rounded-lg border border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all"
                              value={editQuestionText}
                              onChange={(e) => setEditQuestionText(e.target.value)}
                              rows={4}
                            />
                          </div>
                          <button
                            onClick={updateQuestion}
                            className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                          >
                            Update Question
                          </button>
                        </>
                      )}
                    </div>
                  </div>
                  
                  {/* Questions Table */}
                  <h3 className="text-lg font-medium mb-4">All Questions</h3>
                  {databaseQuestions.length > 0 ? (
                    <QuestionsTable questions={databaseQuestions} />
                  ) : (
                    <div className="p-6 bg-gray-50 rounded-lg text-center">
                      No questions available
                    </div>
                  )}
                </div>
              )}

              {activeTab === "candidates" && (
                <div className="space-y-6">
                  <h3 className="text-lg font-medium mb-4">Assigned Candidates</h3>
                  {candidates.length > 0 ? (
                    <CandidatesTable candidates={candidates} />
                  ) : (
                    <div className="p-6 bg-gray-50 rounded-lg text-center">
                      No candidates assigned to this panel
                    </div>
                  )}
                </div>
              )}

              {activeTab === "stats" && (
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <StatsCard 
                      title="Total Questions" 
                      value={databaseQuestions.length}
                      colorClass="text-blue-600"
                    />
                    <StatsCard 
                      title="Total Candidates" 
                      value={candidates.length}
                      colorClass="text-green-600"
                    />
                    <StatsCard 
                      title="Assigned Tasks" 
                      value={assignedTasks.length}
                      colorClass="text-yellow-600"
                    />
                  </div>
                  
                  <div className="bg-gray-50 p-6 rounded-lg mt-6">
                    <h3 className="text-lg font-medium mb-4">Question Distribution</h3>
                    <div className="h-64 flex items-center justify-center">
                      <p className="text-gray-500">Chart would be displayed here</p>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </main>

        {/* Toast Notification Container */}
        <Toaster />
      </div>
    );
  };

  export default PanelDashboard;























  
  const fetchTasks = async () => {
    try {
      const response = await axios.get("/api/tasks");
      setTasks(response.data);
    } catch (error) {
      toast.error("Failed to load tasks.");
    }
  };

  // Fetch tasks assigned by HR
  const fetchAssignedTasks = async () => {
    try {
      const token = localStorage.getItem("authToken");
      const response = await axios.get("http://localhost:5000/api/panel/assigned-tasks", {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      setAssignedTasks(response.data);
    } catch (error) {
      toast.error("Failed to load assigned tasks.");
      console.error("Error fetching assigned tasks:", error);
    }
  };

  // Fetch candidates assigned to this panel
  const fetchCandidates = async () => {
    try {
      const token = localStorage.getItem("authToken");
      const response = await axios.get("http://localhost:5000/api/panel/candidates", {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      setCandidates(response.data);
    } catch (error) {
      toast.error("Failed to load candidates.");
      console.error("Error fetching candidates:", error);
    }
  };

  // Update the fetchQuestions function
  const fetchQuestions = async () => {
    try {
      const response = await axios.get("http://localhost:5000/api/panel/questions");
      setDatabaseQuestions(response.data);
    } catch (error) {
      toast.error("Failed to load questions.");
      console.error("Error fetching questions:", error);
    }
  };

  // Update the generateQuestion function
  const generateQuestion = async () => {
    if (!prompt) {
      toast.error("Please enter a prompt first.");
      return;
    }
    
    setLoading(true);
    try {
      if (prompt.toLowerCase().includes('mcq') || prompt.toLowerCase().includes('multiple choice')) {
        setShowMCQ(true);
        setLoading(false);
        return;
      }

      // Existing question generation code for non-MCQ questions
      const response = await axios.post(
        "https://api.openai.com/v1/completions",
        {
          model: "text-davinci-003",
          prompt: `Generate a question: ${prompt}`,
          max_tokens: 100,
        },
        {
          headers: {
            Authorization: `Bearer ${import.meta.env.VITE_OPENAI_API_KEY}`,
            "Content-Type": "application/json",
          },
        }
      );
      setGeneratedQuestion(response.data.choices[0].text.trim());
      toast.success("Question generated successfully!");
    } catch (error) {
      console.error("Error generating question:", error);
      toast.error("Failed to generate question. Please try again.");
    }
    setLoading(false);
  };

  // Update the saveGeneratedQuestion function
  const saveGeneratedQuestion = async () => {
    if (!generatedQuestion) return;
    
    try {
      const response = await axios.post("http://localhost:5000/api/panel/questions", {
        content: generatedQuestion
      });
      
      if (response.data.success) {
        toast.success("Question saved successfully!");
        fetchQuestions(); // Refresh questions list
        setGeneratedQuestion(""); // Clear generated question
        setPrompt(""); // Clear prompt
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      toast.error("Failed to save question.");
      console.error("Error saving question:", error);
    }
  };

  // Update the updateQuestion function
  const updateQuestion = async () => {
    if (!selectedQuestion || !editQuestionText) return;
    
    try {
      const response = await axios.put(
        `http://localhost:5000/api/panel/questions/${selectedQuestion}`,
        { content: editQuestionText }
      );
      
      if (response.data.success) {
        toast.success("Question updated successfully!");
        fetchQuestions(); // Refresh questions list
        setSelectedQuestion(null);
        setEditQuestionText("");
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      toast.error("Failed to update question.");
      console.error("Error updating question:", error);
    }
  };

  // Update the deleteQuestion function
  const deleteQuestion = async (id) => {
    try {
      const response = await axios.delete(
        `http://localhost:5000/api/panel/questions/${id}`
      );
      
      if (response.data.success) {
        toast.success("Question deleted successfully!");
        fetchQuestions(); // Refresh questions list
        if (id === selectedQuestion) {
          setSelectedQuestion(null);
          setEditQuestionText("");
        }
        // Remove from selected questions if it was selected
        if (selectedQuestions.includes(id)) {
          setSelectedQuestions(selectedQuestions.filter(qId => qId !== id));
        }
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      toast.error("Failed to delete question.");
      console.error("Error deleting question:", error);
    }
  };

  // Handle question selection for editing
  const handleQuestionSelect = (e) => {
    const id = e.target.value;
    setSelectedQuestion(id);
    if (id) {
      const question = databaseQuestions.find(q => q.id === id);
      setEditQuestionText(question?.content || "");
    } else {
      setEditQuestionText("");
    }
  };

  // Separate component for the sidebar button
  const SidebarButton = ({ id, icon, label, onClick, isActive }) => (
    <button
      onClick={onClick}
      className={`w-full flex items-center p-3 rounded-lg transition-colors
        ${isActive ? "bg-blue-600" : "hover:bg-slate-700"}`}
    >
      {icon}
      {isSidebarOpen && <span className="ml-3">{label}</span>}
    </button>
  );

  // Questions table component
  const QuestionsTable = ({ questions, selectable = false }) => (
    <div className="overflow-x-auto">
      <table className="w-full">
        <thead className="bg-gray-50">
          <tr>
            {selectable && (
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Select
              </th>
            )}
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Question</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {questions.map((question) => (
            <tr key={question.id}>
              {selectable && (
                <td className="px-6 py-4">
                  <input
                    type="checkbox"
                    checked={selectedQuestions.includes(question.id)}
                    onChange={() => handleQuestionToggle(question.id)}
                    className="h-4 w-4 text-blue-600 border-gray-300 rounded"
                  />
                </td>
              )}
              <td className="px-6 py-4 whitespace-normal">{question.content}</td>
              <td className="px-6 py-4 whitespace-nowrap">
                <button
                  onClick={() => {
                    setSelectedQuestion(question.id);
                    setEditQuestionText(question.content);
                    setActiveTab("manage");
                  }}
                  className="text-blue-600 hover:text-blue-800 mr-3"
                >
                  Edit
                </button>
                <button
                  onClick={() => deleteQuestion(question.id)}
                  className="text-red-600 hover:text-red-800"
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );

  // Candidates table component
  const CandidatesTable = ({ candidates }) => (
    <div className="overflow-x-auto">
      <table className="w-full">
        <thead className="bg-gray-50">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {candidates.map((candidate) => (
            <tr key={candidate.id}>
              <td className="px-6 py-4 whitespace-nowrap">{candidate.name}</td>
              <td className="px-6 py-4 whitespace-nowrap">{candidate.email}</td>
              <td className="px-6 py-4 whitespace-nowrap">
                <span className={`px-2 py-1 rounded-full text-xs ${
                  candidate.examStatus === 'completed' ? 'bg-green-100 text-green-800' : 
                  candidate.examStatus === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
                  'bg-gray-100 text-gray-800'
                }`}>
                  {candidate.examStatus || 'Not Assigned'}
                </span>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );


# Install the correct library and version
!pip install --upgrade --quiet google-generativeai

# Install dependencies
!pip install google-generativeai python-docx pytesseract pdfplumber filetype
!apt install tesseract-ocr -y

import filetype
import pytesseract
import pdfplumber
import google.generativeai as genai # Using the correct library
from docx import Document
from PIL import Image
from google.colab import files

# Configure Google AI Studio (Gemini API)
genai.configure(api_key="AIzaSyBOq7h29whug3VVqn5hXaStTDLGTPdYoc4")  # Replace with your actual API key

# Upload file
uploaded = files.upload()
file_path = list(uploaded.keys())[0]  # Get uploaded file name

# Function to extract text from PDF
def extract_text_from_pdf(pdf_path):
    text = ""
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            text += page.extract_text() + "\n" if page.extract_text() else ""
    return text.strip()

# Function to extract text from DOCX
def extract_text_from_docx(doc_path):
    doc = Document(doc_path)
    return "\n".join([para.text for para in doc.paragraphs]).strip()

# Function to extract text from images (JPG/PNG) using OCR
def extract_text_from_image(image_path):
    return pytesseract.image_to_string(Image.open(image_path)).strip()

# Auto-detect file type and extract text
def extract_text(file_path):
    kind = filetype.guess(file_path)
    if kind is None:
        return "‚ùå Unknown file type"

    mime_type = kind.mime
    print(f"üìÇ Detected file type: {mime_type}")

    if mime_type == "application/pdf":
        return extract_text_from_pdf(file_path)
    elif mime_type in ["application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"]:
        return extract_text_from_docx(file_path)
    elif mime_type.startswith("image/"):
        return extract_text_from_image(file_path)
    else:
        return "‚ùå Unsupported file type"

# Extract resume text
resume_text = extract_text(file_path)
print("\nüìú Extracted Text:\n", resume_text)


# Send resume text to Gemini for classification
def classify_candidate_level(resume_text):
    prompt = f"""
    Analyze the following resume and classify the candidate as Beginner that includes ???, Intermediate, or Advanced.
    
    Resume: {resume_text}
    
    Answer with one word only.
    """
    # Instantiate the model using the correct method
    model = genai.GenerativeModel('models/gemini-1.5-pro') # Initialize the model with the correct model name

    # Generate content using the GenerativeModel instance
    response = model.generate_content(prompt) # Use generate_content on model instead of client
    
    return response.text.strip()

# Get candidate level
candidate_level = classify_candidate_level(resume_text)
print("\nüîç Candidate Level:", candidate_level)


--------------------------------
üìå Home Page Content for Your Website
1Ô∏è‚É£ Hero Section (First Thing Users See)
Heading: "Revolutionizing Recruitment with AI-Powered Hiring"
Subheading: "A Smart, Data-Driven Platform for Faster, Fairer, and More Efficient Hiring."
Call-to-Action (CTA) Button:
"Get Started" (For companies to explore)
"Learn More" (Links to more details)
2Ô∏è‚É£ About Innovative Hiring (Short Intro)
üí° What is Innovative Hiring?
"Innovative Hiring is an AI-powered recruitment platform designed to streamline the hiring process. It helps HR teams assess candidates efficiently, reduce biases, and make data-driven hiring decisions with real-time insights."

üìå Key Benefits:
‚úîÔ∏è AI-driven candidate evaluation
‚úîÔ∏è Real-time assessments & ranking
‚úîÔ∏è Flexible, self-paced interviews
‚úîÔ∏è Transparent feedback for candidates
‚úîÔ∏è Collaborative HR decision-making
# Configure Google AI Studio (Gemini API)
genai.configure(api_key="AIzaSyBOq7h29whug3VVqn5hXaStTDLGTPdYoc4")
3Ô∏è‚É£ Problems with Traditional Hiring (Why This Platform?)
‚õî Challenges in Traditional Recruitment:

‚ùå Time-consuming resume screening
‚ùå Biased decision-making
‚ùå Scheduling conflicts
‚ùå Lack of real-time candidate evaluation
‚úÖ How Innovative Hiring Solves It:

üåü AI-Powered Screening ‚Äì Instantly evaluates candidates
üåü Flexible Interviewing ‚Äì Candidates attend interviews anytime
üåü Real-Time Ranking ‚Äì HR teams get instant insights
üåü Automated Feedback ‚Äì Candidates receive performance reports
4Ô∏è‚É£ Features Section (What Makes It Unique?)
üõ† Key Features of Innovative Hiring:
üìå AI-Based Question Generation ‚Äì Dynamically generates assessment questions.
üìå Real-Time Interview Monitoring ‚Äì Ensures candidates follow interview rules.
üìå Smart Candidate Ranking ‚Äì Helps recruiters find top talent quickly.
üìå Customizable Questionnaires ‚Äì HR teams create tailored assessments.
üìå Fair & Bias-Free Hiring ‚Äì AI-driven insights ensure unbiased hiring.

5Ô∏è‚É£ Why IMMCO Soft Solutions Should Use It (For Your Company Presentation)
üöÄ Why Choose Innovative Hiring?

Boost hiring efficiency with real-time AI assessments
Reduce human bias with objective candidate ranking
Enhance candidate experience with flexible interview scheduling
Increase HR collaboration with centralized recruitment workflows
üíº Empowering Businesses to Hire Smarter & Faster.

üåü Final Website Elements
Navigation Bar: Home | Features | About | Contact | Get Started
Login/Register Buttons: For recruiters and HR teams
Call-to-Action (CTA) Sections: "Request a Demo" or "Start Hiring Today"
Company Testimonials (If Any): To build trust
Footer with Contact Information
---------------------------------------------------
   ¬© 2025 Innovative Hiring. All rights reserved.
---------------------------------------------------
Powered by **IMMCO Soft Solutions**
Certified by **IMMCO Soft Solutions**
---------------------------------------------------
üìç Contact Us:
üìß Email: support@innovativehiring.com
üìû Phone: +91 XXXXX XXXXX
üåç Website: www.innovativehiring.com

C:\Users\Muthu\AppData\Local\Programs\Python\Python312\python.exe


            <div className="mt-6">
                <Button />
            </div>

import { useState } from "react";

export function Register() {
  const [name, setName] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  const handleSubmit = async () => {
    if (!name.trim()) {
      setError("Name is required");
      return;
    }
    if (password.length < 6) {
      setError("Password must be at least 6 characters long");
      return;
    }

    setError("");

    try {
      const response = await fetch("http://127.0.0.1:5000/register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username: name, password :password}),
      });

      const result = await response.json();

      if (response.ok) {
        setSuccess(result.message);
        setError("");
      } else {
        setError(result.message);
        setSuccess("");
      }
    } catch (error) {
      setError("Server error. Please try again.");
      setSuccess("");
    }
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gradient-to-r from-gray-900 via-black to-gray-900 p-6">
      <div className="bg-gray-800 text-white p-8 rounded-2xl shadow-lg w-full max-w-md">
        <h1 className="text-3xl font-extrabold mb-4 text-center">WELCOME IMMCO SOFTWARE SOLUTIONS</h1>
        <h2 className="text-lg font-medium mb-6 text-center">Create Your Account</h2>
        
        {error && <p className="text-red-400 mb-3 text-center">{error}</p>}
        {success && <p className="text-green-400 mb-3 text-center">{success}</p>}

        <input
          type="text"
          placeholder="Enter Name"
          value={name}
          onChange={(e) => setName(e.target.value)}
          className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none mb-3 text-white placeholder-gray-400"
        />
        <input
          type="password"
          placeholder="Enter Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none mb-3 text-white placeholder-gray-400"
        />
        <button
          onClick={handleSubmit}
          className="w-full bg-gradient-to-r from-blue-500 to-cyan-400 text-white p-3 rounded-lg shadow-lg hover:from-cyan-400 hover:to-blue-500 transition-all font-semibold text-lg"
        >
          Register
        </button>
      </div>
    </div>
  );
}

export default Register;



from flask import Flask, request, jsonify
from flask_cors import CORS
import psycopg2
from werkzeug.security import generate_password_hash
from databaseconnection import get_db_connection

app = Flask(__name__)
CORS(app)

# Route to receive email
@app.route('/api/send-email', methods=['POST'])
def receive_email():
    try:
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "message": "No JSON data received"}), 400

        email1 = data.get("email")  # Extract email from request

        if not email1:
            return jsonify({"success": False, "message": "Email is required"}), 400

        # Store the received email in a temporary variable (optional)
        global received_email
        received_email = email1

        return jsonify({"success": True, "message": "Email received successfully"})

    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 500


# Route to register user
@app.route('/register', methods=['POST'])
def register():
    data = request.json
    username = data.get("username")
    password = data.get("password")

    if not username or not password:
        return jsonify({"message": "Username and password are required", "status": "error"}), 400

    # Ensure we have the received email from `/api/send-email`
    global received_email
    if not received_email:
        return jsonify({"message": "No email found. Please send email first.", "status": "error"}), 400

    conn = get_db_connection()
    if not conn:
        return jsonify({"message": "Database connection failed", "status": "error"}), 500

    cursor = conn.cursor()

    # Verify if the email exists in the users table
    cursor.execute("SELECT email  FROM users WHERE email = %s", (received_email))
    user_data = cursor.fetchone()

    if not user_data:
        cursor.close()
        conn.close()
        return jsonify({"message": "Email not found", "status": "error"}), 400

    email, role = user_data

    # Hash the password before storing
    hashed_password = generate_password_hash(password)

    # Update user details and activate the user
    update_query = """
        UPDATE users 
        SET username = %s, user_password = %s, is_registered = TRUE, user_status = 'Activated'
        WHERE email = %s
        RETURNING id, username, user_role
    """
    cursor.execute(update_query, (username, hashed_password, email))
    new_user = cursor.fetchone()
    conn.commit()

    cursor.close()
    conn.close()

    return jsonify({
        "message": "User registered successfully",
        "user": {
            "user_id": new_user[0],
            "username": new_user[1],
            "role": new_user[2]
        },
        "status": "success"
    }), 201

if __name__ == '__main__':
    app.run(debug=True)
registerlink.Python
from flask import Flask, request, jsonify
import os
import random
import string
import smtplib
import ssl
from email.message import EmailMessage
from flask_cors import CORS
from databaseconnection import get_db_connection
from datetime import datetime

app = Flask(__name__)
CORS(app)


@app.route('/api/create-user', methods=['POST'])
def create_user():
    try:
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "message": "No JSON data received"}), 400

        email = data.get("email")
        role = data.get("role")

        # Input validation
        if not email or not role:
            return jsonify({"success": False, "message": "Email and role are required!"}), 400

        if role not in ["Admin", "Hr", "Panel"]:
            return jsonify({"success": False, "message": "Invalid role!"}), 400

        # Database operations
        conn = None
        cursor = None
        try:
            conn = get_db_connection()
            if conn is None:
                return jsonify({"success": False, "message": "Unable to establish database connection"}), 500

            cursor = conn.cursor()
            
            # Check if email already exists
            cursor.execute("SELECT email FROM users WHERE email = %s", (email,))
            if cursor.fetchone():
                return jsonify({
                    "success": False,
                    "message": "Email already registered!"
                }), 400

            # Insert new user with default values
            cursor.execute(
                """
                INSERT INTO users 
                (email, user_role, user_status, is_registered, created_at)
                VALUES (%s, %s::roles, 'Deactivated'::status, FALSE, %s)
                RETURNING id
                """,
                (email, role, datetime.now())
            )
            
            user_id = cursor.fetchone()
            if not user_id:
                raise Exception("Failed to create user record")

            conn.commit()

            # Email sending
            register_link = f"http://localhost:5173/register?email={email}"
            
            email_sender = 'innovativehiring032@gmail.com'
            email_password = os.getenv('EMAIL_PASSWORD', 'gyyj zcta jsxs fmdt')
            email_receiver = email

            msg = EmailMessage()
            msg.set_content(f"""
            Welcome to our platform!
            
            Click the following link to complete your registration: {register_link}
            
            This link will allow you to set up your username and password.
            """)
            msg["Subject"] = "Complete Your Registration"
            msg["From"] = email_sender
            msg["To"] = email_receiver

            context = ssl.create_default_context()
            with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
                server.login(email_sender, email_password)
                server.send_message(msg)

            return jsonify({
                "success": True,
                "message": "User created successfully and email sent!"
            }), 200

        except Exception as db_error:
            if conn:
                conn.rollback()
            print(f"Database error: {str(db_error)}")
            return jsonify({
                "success": False,
                "message": f"Database operation failed: {str(db_error)}"
            }), 500

        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()

    except Exception as e:
        print(f"General error: {str(e)}")
        return jsonify({
            "success": False,
            "message": "An unexpected error occurred"
        }), 500

if __name__ == '__main__':
    app.run(debug=True, port=5000)
    
register.python
from flask import Flask, request, jsonify
from flask_cors import CORS
import psycopg2
from werkzeug.security import generate_password_hash
from databaseconnection import get_db_connection

app = Flask(__name__)
CORS(app)

# Route to receive email
@app.route('/api/send-email', methods=['OPTIONS', 'POST'])
def receive_email():
    if request.method == "OPTIONS":
        return jsonify({"message": "Preflight OK"}), 200  # Handle preflight request

    try:
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "message": "No JSON data received"}), 400

        email1 = data.get("email")  # Extract email from request
        if not email1:
            return jsonify({"success": False, "message": "Email is required"}), 400

        global received_email
        received_email = email1

        return jsonify({"success": True, "message": "Email received successfully"})

    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 500


# Route to register user
@app.route('/register', methods=['POST'])
def register():
    data = request.json
    username = data.get("username")
    password = data.get("password")

    if not username or not password:
        return jsonify({"message": "Username and password are required", "status": "error"}), 400

    # Ensure we have the received email from `/api/send-email`
    global received_email
    if not received_email:
        return jsonify({"message": "No email found. Please send email first.", "status": "error"}), 400

    conn = get_db_connection()
    if not conn:
        return jsonify({"message": "Database connection failed", "status": "error"}), 500

    cursor = conn.cursor()

    # Verify if the email exists in the users table
    cursor.execute("SELECT email  FROM users WHERE email = %s", (received_email))
    user_data = cursor.fetchone()

    if not user_data:
        cursor.close()
        conn.close()
        return jsonify({"message": "Email not found", "status": "error"}), 400

    email, role = user_data

    # Hash the password before storing
    hashed_password = generate_password_hash(password)

    # Update user details and activate the user
    update_query = """
        UPDATE users 
        SET username = %s, user_password = %s, is_registered = TRUE, user_status = 'Activated'
        WHERE email = %s
        RETURNING id, username, user_role
    """
    cursor.execute(update_query, (username, hashed_password, email))
    new_user = cursor.fetchone()
    conn.commit()

    cursor.close()
    conn.close()

    return jsonify({
        "message": "User registered successfully",
        "user": {
            "user_id": new_user[0],
            "username": new_user[1],
            "role": new_user[2]
        },
        "status": "success"
    }), 201

if __name__ == '__main__':
    app.run(debug=True)
